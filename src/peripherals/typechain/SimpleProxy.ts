/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SimpleProxyInterface extends utils.Interface {
  functions: {
    "proxyGovernance()": FunctionFragment;
    "proxyImplementation()": FunctionFragment;
    "resetProxyOwner(address)": FunctionFragment;
    "upgradeProxy(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "proxyGovernance",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "proxyImplementation",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "resetProxyOwner",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeProxy",
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: "proxyGovernance",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxyImplementation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetProxyOwner",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeProxy",
    data: BytesLike,
  ): Result;

  events: {};
}

export interface SimpleProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    proxyGovernance(overrides?: CallOverrides): Promise<[string]>;

    "proxyGovernance()"(overrides?: CallOverrides): Promise<[string]>;

    proxyImplementation(overrides?: CallOverrides): Promise<[string]>;

    "proxyImplementation()"(overrides?: CallOverrides): Promise<[string]>;

    resetProxyOwner(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "resetProxyOwner(address)"(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    upgradeProxy(
      _newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "upgradeProxy(address)"(
      _newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  proxyGovernance(overrides?: CallOverrides): Promise<string>;

  "proxyGovernance()"(overrides?: CallOverrides): Promise<string>;

  proxyImplementation(overrides?: CallOverrides): Promise<string>;

  "proxyImplementation()"(overrides?: CallOverrides): Promise<string>;

  resetProxyOwner(
    _newGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "resetProxyOwner(address)"(
    _newGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  upgradeProxy(
    _newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "upgradeProxy(address)"(
    _newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    proxyGovernance(overrides?: CallOverrides): Promise<string>;

    "proxyGovernance()"(overrides?: CallOverrides): Promise<string>;

    proxyImplementation(overrides?: CallOverrides): Promise<string>;

    "proxyImplementation()"(overrides?: CallOverrides): Promise<string>;

    resetProxyOwner(
      _newGovernance: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    "resetProxyOwner(address)"(
      _newGovernance: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    upgradeProxy(
      _newImplementation: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    "upgradeProxy(address)"(
      _newImplementation: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    proxyGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    "proxyGovernance()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxyImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    "proxyImplementation()"(overrides?: CallOverrides): Promise<BigNumber>;

    resetProxyOwner(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "resetProxyOwner(address)"(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    upgradeProxy(
      _newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "upgradeProxy(address)"(
      _newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    proxyGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxyGovernance()"(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    proxyImplementation(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "proxyImplementation()"(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    resetProxyOwner(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "resetProxyOwner(address)"(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    upgradeProxy(
      _newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "upgradeProxy(address)"(
      _newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
