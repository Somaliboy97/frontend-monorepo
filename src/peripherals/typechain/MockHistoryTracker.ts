/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MockHistoryTrackerInterface extends utils.Interface {
  functions: {
    "clear(uint256)": FunctionFragment;
    "find(uint256)": FunctionFragment;
    "findAndClear(uint256,uint256)": FunctionFragment;
    "loadBounds()": FunctionFragment;
    "loadTop()": FunctionFragment;
    "multiPush(uint256[])": FunctionFragment;
    "peekArrayData(uint256,uint256)": FunctionFragment;
    "push(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "clear", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "find", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "findAndClear",
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "loadBounds",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "loadTop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multiPush",
    values: [BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: "peekArrayData",
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "push", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "find", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findAndClear",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "loadBounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loadTop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiPush", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "peekArrayData",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "push", data: BytesLike): Result;

  events: {};
}

export interface MockHistoryTracker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockHistoryTrackerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    clear(
      newMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "clear(uint256)"(
      newMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    find(which: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "find(uint256)"(
      which: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    findAndClear(
      which: BigNumberish,
      stale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "findAndClear(uint256,uint256)"(
      which: BigNumberish,
      stale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    loadBounds(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    "loadBounds()"(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    loadTop(overrides?: CallOverrides): Promise<[BigNumber]>;

    "loadTop()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    multiPush(
      toBePushed: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "multiPush(uint256[])"(
      toBePushed: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    peekArrayData(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[], BigNumber[]]>;

    "peekArrayData(uint256,uint256)"(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[], BigNumber[]]>;

    push(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "push(uint256)"(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  clear(
    newMin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "clear(uint256)"(
    newMin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  find(which: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "find(uint256)"(
    which: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  findAndClear(
    which: BigNumberish,
    stale: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "findAndClear(uint256,uint256)"(
    which: BigNumberish,
    stale: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  loadBounds(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  "loadBounds()"(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  loadTop(overrides?: CallOverrides): Promise<BigNumber>;

  "loadTop()"(overrides?: CallOverrides): Promise<BigNumber>;

  multiPush(
    toBePushed: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "multiPush(uint256[])"(
    toBePushed: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  peekArrayData(
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber[], BigNumber[]]>;

  "peekArrayData(uint256,uint256)"(
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber[], BigNumber[]]>;

  push(
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "push(uint256)"(
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    clear(newMin: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "clear(uint256)"(
      newMin: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    find(which: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "find(uint256)"(
      which: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    findAndClear(
      which: BigNumberish,
      stale: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "findAndClear(uint256,uint256)"(
      which: BigNumberish,
      stale: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    loadBounds(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    "loadBounds()"(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    loadTop(overrides?: CallOverrides): Promise<BigNumber>;

    "loadTop()"(overrides?: CallOverrides): Promise<BigNumber>;

    multiPush(
      toBePushed: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    "multiPush(uint256[])"(
      toBePushed: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    peekArrayData(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[], BigNumber[]]>;

    "peekArrayData(uint256,uint256)"(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[], BigNumber[]]>;

    push(data: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "push(uint256)"(
      data: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    clear(
      newMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "clear(uint256)"(
      newMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    find(which: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "find(uint256)"(
      which: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    findAndClear(
      which: BigNumberish,
      stale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "findAndClear(uint256,uint256)"(
      which: BigNumberish,
      stale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    loadBounds(overrides?: CallOverrides): Promise<BigNumber>;

    "loadBounds()"(overrides?: CallOverrides): Promise<BigNumber>;

    loadTop(overrides?: CallOverrides): Promise<BigNumber>;

    "loadTop()"(overrides?: CallOverrides): Promise<BigNumber>;

    multiPush(
      toBePushed: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "multiPush(uint256[])"(
      toBePushed: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    peekArrayData(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "peekArrayData(uint256,uint256)"(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    push(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "push(uint256)"(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clear(
      newMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "clear(uint256)"(
      newMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    find(
      which: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "find(uint256)"(
      which: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    findAndClear(
      which: BigNumberish,
      stale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "findAndClear(uint256,uint256)"(
      which: BigNumberish,
      stale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    loadBounds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "loadBounds()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loadTop(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "loadTop()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiPush(
      toBePushed: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "multiPush(uint256[])"(
      toBePushed: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    peekArrayData(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "peekArrayData(uint256,uint256)"(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    push(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "push(uint256)"(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
