/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MockLockingVaultInterface extends utils.Interface {
  functions: {
    "delegation(address)": FunctionFragment;
    "deposit(address,uint256,address)": FunctionFragment;
    "deposits(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "delegation", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: "deposits", values: [string]): string;

  decodeFunctionResult(functionFragment: "delegation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;

  events: {};
}

export interface MockLockingVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockLockingVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    delegation(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "delegation(address)"(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    deposit(
      fundedAccount: string,
      amount: BigNumberish,
      firstDelegation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "deposit(address,uint256,address)"(
      fundedAccount: string,
      amount: BigNumberish,
      firstDelegation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "deposits(address)"(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;
  };

  delegation(arg0: string, overrides?: CallOverrides): Promise<string>;

  "delegation(address)"(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<string>;

  deposit(
    fundedAccount: string,
    amount: BigNumberish,
    firstDelegation: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "deposit(address,uint256,address)"(
    fundedAccount: string,
    amount: BigNumberish,
    firstDelegation: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "deposits(address)"(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  callStatic: {
    delegation(arg0: string, overrides?: CallOverrides): Promise<string>;

    "delegation(address)"(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    deposit(
      fundedAccount: string,
      amount: BigNumberish,
      firstDelegation: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    "deposit(address,uint256,address)"(
      fundedAccount: string,
      amount: BigNumberish,
      firstDelegation: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "deposits(address)"(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    delegation(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "delegation(address)"(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    deposit(
      fundedAccount: string,
      amount: BigNumberish,
      firstDelegation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "deposit(address,uint256,address)"(
      fundedAccount: string,
      amount: BigNumberish,
      firstDelegation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "deposits(address)"(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    delegation(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "delegation(address)"(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    deposit(
      fundedAccount: string,
      amount: BigNumberish,
      firstDelegation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256,address)"(
      fundedAccount: string,
      amount: BigNumberish,
      firstDelegation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "deposits(address)"(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
