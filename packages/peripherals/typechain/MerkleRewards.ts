/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MerkleRewardsInterface extends utils.Interface {
  functions: {
    "claim(uint256,uint256,bytes32[],address)": FunctionFragment;
    "claimAndDelegate(uint256,address,uint256,bytes32[],address)": FunctionFragment;
    "claimed(address)": FunctionFragment;
    "lockingVault()": FunctionFragment;
    "rewardsRoot()": FunctionFragment;
    "token()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, BigNumberish, BytesLike[], string],
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndDelegate",
    values: [BigNumberish, string, BigNumberish, BytesLike[], string],
  ): string;
  encodeFunctionData(functionFragment: "claimed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lockingVault",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsRoot",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAndDelegate",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockingVault",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsRoot",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {};
}

export interface MerkleRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MerkleRewardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      amount: BigNumberish,
      totalGrant: BigNumberish,
      merkleProof: BytesLike[],
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "claim(uint256,uint256,bytes32[],address)"(
      amount: BigNumberish,
      totalGrant: BigNumberish,
      merkleProof: BytesLike[],
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimAndDelegate(
      amount: BigNumberish,
      delegate: string,
      totalGrant: BigNumberish,
      merkleProof: BytesLike[],
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "claimAndDelegate(uint256,address,uint256,bytes32[],address)"(
      amount: BigNumberish,
      delegate: string,
      totalGrant: BigNumberish,
      merkleProof: BytesLike[],
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    lockingVault(overrides?: CallOverrides): Promise<[string]>;

    "lockingVault()"(overrides?: CallOverrides): Promise<[string]>;

    rewardsRoot(overrides?: CallOverrides): Promise<[string]>;

    "rewardsRoot()"(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;
  };

  claim(
    amount: BigNumberish,
    totalGrant: BigNumberish,
    merkleProof: BytesLike[],
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "claim(uint256,uint256,bytes32[],address)"(
    amount: BigNumberish,
    totalGrant: BigNumberish,
    merkleProof: BytesLike[],
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimAndDelegate(
    amount: BigNumberish,
    delegate: string,
    totalGrant: BigNumberish,
    merkleProof: BytesLike[],
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "claimAndDelegate(uint256,address,uint256,bytes32[],address)"(
    amount: BigNumberish,
    delegate: string,
    totalGrant: BigNumberish,
    merkleProof: BytesLike[],
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "claimed(address)"(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  lockingVault(overrides?: CallOverrides): Promise<string>;

  "lockingVault()"(overrides?: CallOverrides): Promise<string>;

  rewardsRoot(overrides?: CallOverrides): Promise<string>;

  "rewardsRoot()"(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    claim(
      amount: BigNumberish,
      totalGrant: BigNumberish,
      merkleProof: BytesLike[],
      destination: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    "claim(uint256,uint256,bytes32[],address)"(
      amount: BigNumberish,
      totalGrant: BigNumberish,
      merkleProof: BytesLike[],
      destination: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    claimAndDelegate(
      amount: BigNumberish,
      delegate: string,
      totalGrant: BigNumberish,
      merkleProof: BytesLike[],
      destination: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    "claimAndDelegate(uint256,address,uint256,bytes32[],address)"(
      amount: BigNumberish,
      delegate: string,
      totalGrant: BigNumberish,
      merkleProof: BytesLike[],
      destination: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lockingVault(overrides?: CallOverrides): Promise<string>;

    "lockingVault()"(overrides?: CallOverrides): Promise<string>;

    rewardsRoot(overrides?: CallOverrides): Promise<string>;

    "rewardsRoot()"(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    claim(
      amount: BigNumberish,
      totalGrant: BigNumberish,
      merkleProof: BytesLike[],
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "claim(uint256,uint256,bytes32[],address)"(
      amount: BigNumberish,
      totalGrant: BigNumberish,
      merkleProof: BytesLike[],
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claimAndDelegate(
      amount: BigNumberish,
      delegate: string,
      totalGrant: BigNumberish,
      merkleProof: BytesLike[],
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "claimAndDelegate(uint256,address,uint256,bytes32[],address)"(
      amount: BigNumberish,
      delegate: string,
      totalGrant: BigNumberish,
      merkleProof: BytesLike[],
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lockingVault(overrides?: CallOverrides): Promise<BigNumber>;

    "lockingVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsRoot(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsRoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      amount: BigNumberish,
      totalGrant: BigNumberish,
      merkleProof: BytesLike[],
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "claim(uint256,uint256,bytes32[],address)"(
      amount: BigNumberish,
      totalGrant: BigNumberish,
      merkleProof: BytesLike[],
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimAndDelegate(
      amount: BigNumberish,
      delegate: string,
      totalGrant: BigNumberish,
      merkleProof: BytesLike[],
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "claimAndDelegate(uint256,address,uint256,bytes32[],address)"(
      amount: BigNumberish,
      delegate: string,
      totalGrant: BigNumberish,
      merkleProof: BytesLike[],
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lockingVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockingVault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsRoot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
