/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestCoreVoting,
  TestCoreVotingInterface,
} from "../TestCoreVoting";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_timelock",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_baseQuorum",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_minProposalPower",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_gsc",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "votingVaults",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "created",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "execution",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "expiration",
        type: "uint256",
      },
    ],
    name: "ProposalCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "ProposalExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "votingPower",
            type: "uint128",
          },
          {
            internalType: "enum CoreVoting.Ballot",
            name: "castBallot",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct CoreVoting.Vote",
        name: "vote",
        type: "tuple",
      },
    ],
    name: "Voted",
    type: "event",
  },
  {
    inputs: [],
    name: "DAY_IN_BLOCKS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "approvedVaults",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "authorize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "authorized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseQuorum",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_extraVoteTime",
        type: "uint256",
      },
    ],
    name: "changeExtraVotingTime",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
    ],
    name: "changeVaultStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "deauthorize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dummyValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "calldatas",
        type: "bytes[]",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "extraVoteTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "_selector",
        type: "bytes4",
      },
    ],
    name: "getCustomQuorum",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalID",
        type: "uint256",
      },
    ],
    name: "getProposalData",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "uint128[3]",
        name: "",
        type: "uint128[3]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "getProposalVotingPower",
    outputs: [
      {
        internalType: "uint128[3]",
        name: "",
        type: "uint128[3]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_vault",
        type: "address",
      },
    ],
    name: "getVaultStatus",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "isAuthorized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lockDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minProposalPower",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "votingVaults",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "extraVaultData",
        type: "bytes[]",
      },
      {
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "calldatas",
        type: "bytes[]",
      },
      {
        internalType: "uint256",
        name: "lastCall",
        type: "uint256",
      },
      {
        internalType: "enum CoreVoting.Ballot",
        name: "ballot",
        type: "uint8",
      },
    ],
    name: "proposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proposalCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "bytes32",
        name: "proposalHash",
        type: "bytes32",
      },
      {
        internalType: "uint128",
        name: "created",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "unlock",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "expiration",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "quorum",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "lastCall",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "functionSelector",
        type: "bytes4",
      },
    ],
    name: "quorums",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        internalType: "uint256",
        name: "quorum",
        type: "uint256",
      },
    ],
    name: "setCustomQuorum",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "quorum",
        type: "uint256",
      },
    ],
    name: "setDefaultQuorum",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_lockDuration",
        type: "uint256",
      },
    ],
    name: "setLockDuration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_minProposalPower",
        type: "uint256",
      },
    ],
    name: "setMinProposalPower",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newValue",
        type: "uint256",
      },
    ],
    name: "updateDummy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "votingVaults",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "extraVaultData",
        type: "bytes[]",
      },
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "enum CoreVoting.Ballot",
        name: "ballot",
        type: "uint8",
      },
    ],
    name: "vote",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "votes",
    outputs: [
      {
        internalType: "uint128",
        name: "votingPower",
        type: "uint128",
      },
      {
        internalType: "enum CoreVoting.Ballot",
        name: "castBallot",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052620000136119606003620002e0565b600455620000256119606005620002e0565b6005553480156200003557600080fd5b5060405162002ed538038062002ed58339810160408190526200005891620001d0565b600080546001600160a01b0319163317815560038590556006849055859085908590859085905b8151811015620000f757600160096000848481518110620000b057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620000ee8162000302565b9150506200007f565b5062000103856200013f565b6200012f826001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b505050505050505050506200034c565b6000546001600160a01b03163314620001915760405162461bcd60e51b815260206004820152601060248201526f29b2b73232b9103737ba1037bbb732b960811b604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b80516001600160a01b0381168114620001cb57600080fd5b919050565b600080600080600060a08688031215620001e8578081fd5b620001f386620001b3565b94506020808701519450604087015193506200021260608801620001b3565b60808801519093506001600160401b03808211156200022f578384fd5b818901915089601f83011262000243578384fd5b81518181111562000258576200025862000336565b8060051b604051601f19603f8301168101818110858211171562000280576200028062000336565b604052828152858101935084860182860187018e10156200029f578788fd5b8795505b83861015620002cc57620002b781620001b3565b855260019590950194938601938601620002a3565b508096505050505050509295509295909350565b6000816000190483118215151615620002fd57620002fd62000320565b500290565b600060001982141562000319576200031962000320565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b612b79806200035c6000396000f3fe608060405234801561001057600080fd5b50600436106101e45760003560e01c80637d5709eb1161010f578063bd9c75a5116100a2578063d4b8756711610071578063d4b8756714610546578063da35c6641461054f578063f131e5eb14610558578063fe9fbb8014610561576101e4565b8063bd9c75a5146104ed578063c52ea3db14610500578063ca5f9d0614610520578063d1b6762714610533576101e4565b8063aa35fb51116100de578063aa35fb5114610481578063af7a060c14610494578063b6a5d7de146104b7578063b9181611146104ca576101e4565b80637d5709eb146103bc5780638da5cb5b146103cf5780639f2524ee14610414578063a4c9507714610478576101e4565b806327c97fa5116101875780634eb665af116101565780634eb665af146103695780636e7685301461037c57806370469c26146103a0578063771a5323146103a9576101e4565b806327c97fa51461031d57806333968c6614610330578063341a7b42146103435780634392b99c14610356576101e4565b806313af4035116101c357806313af4035146102cb57806315126a3d146102de578063180d97c1146102f15780631c39c96c14610314576101e4565b806214d11d146101e9578063013cf08b146101fe57806304554443146102b4575b600080fd5b6101fc6101f7366004612530565b61059a565b005b61026861020c366004612530565b600a60205260009081526040902080546001820154600283015460059093015491926fffffffffffffffffffffffffffffffff808316937001000000000000000000000000000000009384900482169383831693048216911686565b604080519687526fffffffffffffffffffffffffffffffff9586166020880152938516938601939093529083166060850152821660808401521660a082015260c0015b60405180910390f35b6102bd60045481565b6040519081526020016102ab565b6101fc6102d93660046122f3565b61060b565b6101fc6102ec366004612560565b6106b9565b6103046102ff3660046122f3565b610c9f565b60405190151581526020016102ab565b6102bd60035481565b6101fc61032b3660046122f3565b610cce565b6102bd61033e366004612347565b610d81565b6101fc61035136600461230d565b610d96565b6101fc610364366004612379565b610e53565b6101fc610377366004612530565b610f10565b61038f61038a366004612530565b610f7c565b6040516102ab9594939291906128b6565b6102bd600c5481565b6102bd6103b7366004612347565b611061565b6101fc6103ca366004612530565b6110d1565b6000546103ef9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102ab565b61046a6104223660046123b4565b600b6020908152600092835260408084209091529082529020546fffffffffffffffffffffffffffffffff811690700100000000000000000000000000000000900460ff1682565b6040516102ab92919061292c565b6102bd60055481565b6102bd61048f3660046124b5565b61113d565b6103046104a23660046122f3565b60096020526000908152604090205460ff1681565b6101fc6104c53660046122f3565b61184b565b6103046104d83660046122f3565b60016020526000908152604090205460ff1681565b6101fc6104fb3660046123dd565b61190b565b61051361050e366004612530565b611ef5565b6040516102ab91906128a8565b6101fc61052e366004612530565b600c55565b6101fc610541366004612530565b611f81565b6102bd60065481565b6102bd60075481565b6102bd61196081565b61030461056f3660046122f3565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106065760405162461bcd60e51b815260206004820152601060248201527f53656e646572206e6f74206f776e65720000000000000000000000000000000060448201526064015b60405180910390fd5b600555565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106725760405162461bcd60e51b815260206004820152601060248201527f53656e646572206e6f74206f776e65720000000000000000000000000000000060448201526064016105fd565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60025460ff161561070c5760405162461bcd60e51b815260206004820152600a60248201527f5265656e7472616e63790000000000000000000000000000000000000000000060448201526064016105fd565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556000848152600a6020526040902001546fffffffffffffffffffffffffffffffff700100000000000000000000000000000000909104164310156107c05760405162461bcd60e51b815260206004820152600c60248201527f6e6f7420756e6c6f636b6564000000000000000000000000000000000000000060448201526064016105fd565b6000838152600a602052604090206001015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff166108445760405162461bcd60e51b815260206004820152601360248201527f50726576696f75736c792065786563757465640000000000000000000000000060448201526064016105fd565b6000838152600a60205260409020600501546fffffffffffffffffffffffffffffffff1643106108b65760405162461bcd60e51b815260206004820152601860248201527f70617374206c6173742063616c6c2074696d657374616d70000000000000000060448201526064016105fd565b6000838152600a60209081526040918290205491516108d99185918591016127f9565b604051602081830303815290604052805190602001201461093c5760405162461bcd60e51b815260206004820152600d60248201527f68617368206d69736d617463680000000000000000000000000000000000000060448201526064016105fd565b6000838152600a60205260408082208151606081019283905291600391820191908285855b82829054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019060100190602082600f01049283019260010382029150808411610961575050506000888152600a60209081526040808320600201549087015191870151875197985092967001000000000000000000000000000000009091046fffffffffffffffffffffffffffffffff169550909350610a109250612a11565b610a1a9190612a11565b6fffffffffffffffffffffffffffffffff1610159050600082600160200201516fffffffffffffffffffffffffffffffff1683600060200201516fffffffffffffffffffffffffffffffff16119050818015610a735750805b610abf5760405162461bcd60e51b815260206004820152600e60248201527f43616e6e6f74206578656375746500000000000000000000000000000000000060448201526064016105fd565b60005b8551811015610be6576000868281518110610aed57634e487b7160e01b600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16868381518110610b2b57634e487b7160e01b600052603260045260246000fd5b6020026020010151604051610b40919061267d565b6000604051808303816000865af19150503d8060008114610b7d576040519150601f19603f3d011682016040523d82523d6000602084013e610b82565b606091505b5050905080610bd35760405162461bcd60e51b815260206004820152600b60248201527f43616c6c206661696c656400000000000000000000000000000000000000000060448201526064016105fd565b5080610bde81612ade565b915050610ac2565b506040518681527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f9060200160405180910390a150505060009283525050600a6020526040812081815560018101829055600280820183905560038201839055600482019290925560050180547fffffffffffffffffffffffffffffffff0000000000000000000000000000000016905580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b73ffffffffffffffffffffffffffffffffffffffff811660009081526009602052604090205460ff165b919050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610d355760405162461bcd60e51b815260206004820152601060248201527f53656e646572206e6f74206f776e65720000000000000000000000000000000060448201526064016105fd565b73ffffffffffffffffffffffffffffffffffffffff16600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b6000610d8d8383611061565b90505b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610dfd5760405162461bcd60e51b815260206004820152601060248201527f53656e646572206e6f74206f776e65720000000000000000000000000000000060448201526064016105fd565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260096020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610eba5760405162461bcd60e51b815260206004820152601060248201527f53656e646572206e6f74206f776e65720000000000000000000000000000000060448201526064016105fd565b73ffffffffffffffffffffffffffffffffffffffff90921660009081526008602090815260408083207fffffffff0000000000000000000000000000000000000000000000000000000090941683529290522055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f775760405162461bcd60e51b815260206004820152601060248201527f53656e646572206e6f74206f776e65720000000000000000000000000000000060448201526064016105fd565b600455565b600080600080610f8a612016565b6000868152600a60205260408082208054600182015460028301548451606081019586905292956fffffffffffffffffffffffffffffffff8084169670010000000000000000000000000000000094859004821696949093041693600393840193909284928390855b82829054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019060100190602082600f01049283019260010382029150808411610ff3579050505050505090509450945094509450945091939590929450565b73ffffffffffffffffffffffffffffffffffffffff821660009081526008602090815260408083207fffffffff0000000000000000000000000000000000000000000000000000000085168452909152812054806110c3575050600354610d90565b9050610d90565b5092915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146111385760405162461bcd60e51b815260206004820152601060248201527f53656e646572206e6f74206f776e65720000000000000000000000000000000060448201526064016105fd565b600355565b6000828152600a60205260408120600101546fffffffffffffffffffffffffffffffff166111ad5760405162461bcd60e51b815260206004820152601760248201527f70726f706f73616c20646f6573206e6f7420657869737400000000000000000060448201526064016105fd565b6000838152600a60205260409020600201546fffffffffffffffffffffffffffffffff164311156112205760405162461bcd60e51b815260206004820152600760248201527f457870697265640000000000000000000000000000000000000000000000000060448201526064016105fd565b6000805b86518110156114f457600061123a826001612a45565b90505b87518110156113225787818151811061126657634e487b7160e01b600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168883815181106112a457634e487b7160e01b600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156113105760405162461bcd60e51b815260206004820152600f60248201527f6475706c6963617465207661756c74000000000000000000000000000000000060448201526064016105fd565b8061131a81612ade565b91505061123d565b506009600088838151811061134757634e487b7160e01b600052603260045260246000fd5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040016000205460ff166113c75760405162461bcd60e51b815260206004820152601060248201527f756e7665726966696564207661756c740000000000000000000000000000000060448201526064016105fd565b8681815181106113e757634e487b7160e01b600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663e91f323533600a600089815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff1689858151811061145e57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b815260040161148493929190612699565b602060405180830381600087803b15801561149e57600080fd5b505af11580156114b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d69190612548565b6114e09083612a11565b9150806114ec81612ade565b915050611224565b50336000908152600b602090815260408083208784529091529020546fffffffffffffffffffffffffffffffff161561162757336000908152600b6020908152604080832087845280835281842054600a845291909320929091526fffffffffffffffffffffffffffffffff81169160030190700100000000000000000000000000000000900460ff16600281111561159d57634e487b7160e01b600052602160045260246000fd5b600381106115bb57634e487b7160e01b600052603260045260246000fd5b600291828204019190066010028282829054906101000a90046fffffffffffffffffffffffffffffffff166115f09190612a5d565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b6040518060400160405280826fffffffffffffffffffffffffffffffff16815260200184600281111561166a57634e487b7160e01b600052602160045260246000fd5b9052336000908152600b602090815260408083208884528252909120825181546fffffffffffffffffffffffffffffffff9091167fffffffffffffffffffffffffffffffff0000000000000000000000000000000082168117835592840151919283917fffffffffffffffffffffffffffffff0000000000000000000000000000000000161770010000000000000000000000000000000083600281111561172257634e487b7160e01b600052602160045260246000fd5b021790555050506000848152600a60205260409020819060030184600281111561175c57634e487b7160e01b600052602160045260246000fd5b6003811061177a57634e487b7160e01b600052603260045260246000fd5b600291828204019190066010028282829054906101000a90046fffffffffffffffffffffffffffffffff166117af9190612a11565b82546fffffffffffffffffffffffffffffffff9182166101009390930a928302919092021990911617905550336000818152600b602090815260408083208884529091529081902090518692917f79597d31752b5a254be8f219c055ebfefe925e085d99c7b04b0883298b3569519161182891906128fc565b60405180910390a36fffffffffffffffffffffffffffffffff1695945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146118b25760405162461bcd60e51b815260206004820152601060248201527f53656e646572206e6f74206f776e65720000000000000000000000000000000060448201526064016105fd565b6119088173ffffffffffffffffffffffffffffffffffffffff16600090815260016020819052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055565b50565b84831461195a5760405162461bcd60e51b815260206004820152601560248201527f6172726179206c656e677468206d69736d61746368000000000000000000000060448201526064016105fd565b846119a75760405162461bcd60e51b815260206004820152600e60248201527f656d7074792070726f706f73616c00000000000000000000000000000000000060448201526064016105fd565b6000868686866040516020016119c094939291906126e9565b60408051601f19818403018152919052805160209091012090506000805b87811015611b1f576000611a57888884818110611a0b57634e487b7160e01b600052603260045260246000fd5b9050602002810190611a1d9190612959565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611fed92505050565b90506000600860008c8c86818110611a7f57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611a9491906122f3565b73ffffffffffffffffffffffffffffffffffffffff168152602080820192909252604090810160009081207fffffffff000000000000000000000000000000000000000000000000000000008616825290925290205490508015611af85780611afc565b6003545b905083811115611b0a578093505b50508080611b1790612ade565b9150506119de565b50600554600454611b309043612a45565b611b3a9190612a45565b8411611b885760405162461bcd60e51b815260206004820152601a60248201527f65787069726573206265666f726520766f74696e6720656e647300000000000060448201526064016105fd565b6040518060e00160405280838152602001600143611ba69190612a8e565b6fffffffffffffffffffffffffffffffff16815260200160045443611bcb9190612a45565b6fffffffffffffffffffffffffffffffff16815260200160055460045443611bf39190612a45565b611bfd9190612a45565b6fffffffffffffffffffffffffffffffff168152602001826fffffffffffffffffffffffffffffffff168152602001600a60006007548152602001908152602001600020600301600380602002604051908101604052809291908260038015611cbf576020028201916000905b82829054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019060100190602082600f01049283019260010382029150808411611c6a5790505b50505091835250506fffffffffffffffffffffffffffffffff8681166020928301526007546000908152600a835260409081902084518155928401519084015190821670010000000000000000000000000000000091831682021760018401556060840151608085015190831692160217600282015560a0820151611d4a9060038084019190612034565b5060c08201518160050160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050506000611ddb8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611dd292508e91508f9050612aa5565b6007548761113d565b90506000600654831115611df157600654611df3565b825b3360009081526001602052604090205490915060ff16611e5d5780821015611e5d5760405162461bcd60e51b815260206004820152601960248201527f696e73756666696369656e7420766f74696e6720706f7765720000000000000060448201526064016105fd565b7fafbd5d299242bf861d198949ad835672e2e35b2e1838cee606a0b5aec2b4fa426007544360045443611e909190612a45565b600554600454611ea09043612a45565b611eaa9190612a45565b60408051948552602085019390935291830152606082015260800160405180910390a1600160076000828254611ee09190612a45565b90915550505050505050505050505050505050565b611efd612016565b6000828152600a60205260408082208151606081019283905292600391820192908390855b82829054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019060100190602082600f01049283019260010382029150808411611f22575094979650505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611fe85760405162461bcd60e51b815260206004820152601060248201527f53656e646572206e6f74206f776e65720000000000000000000000000000000060448201526064016105fd565b600655565b602001517ffffffffff00000000000000000000000000000000000000000000000000000001690565b60405180606001604052806003906020820280368337509192915050565b6002830191839082156120e45791602002820160005b838211156120a657835183826101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509260200192601001602081600f0104928301926001030261204a565b80156120e25782816101000a8154906fffffffffffffffffffffffffffffffff0219169055601001602081600f010492830192600103026120a6565b505b506120f09291506120f4565b5090565b5b808211156120f057600081556001016120f5565b600061211c612117846129ed565b6129bc565b83815290506020808201908360005b868110156121ab5781358601601f898183011261214757600080fd5b813567ffffffffffffffff81111561216157612161612b2d565b61217286601f1984840116016129bc565b91508082528a8682850101111561218857600080fd5b80868401878401376000908201860152855250928201929082019060010161212b565b505050509392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610cc957600080fd5b60008083601f8401126121eb578182fd5b50813567ffffffffffffffff811115612202578182fd5b6020830191508360208260051b850101111561221d57600080fd5b9250929050565b600082601f830112612234578081fd5b81356020612244612117836129ed565b80838252828201915082860187848660051b8901011115612263578586fd5b855b8581101561228857612276826121b6565b84529284019290840190600101612265565b5090979650505050505050565b600082601f8301126122a5578081fd5b610d8d83833560208501612109565b80357fffffffff0000000000000000000000000000000000000000000000000000000081168114610cc957600080fd5b803560038110610cc957600080fd5b600060208284031215612304578081fd5b610d8d826121b6565b6000806040838503121561231f578081fd5b612328836121b6565b91506020830135801515811461233c578182fd5b809150509250929050565b60008060408385031215612359578182fd5b612362836121b6565b9150612370602084016122b4565b90509250929050565b60008060006060848603121561238d578081fd5b612396846121b6565b92506123a4602085016122b4565b9150604084013590509250925092565b600080604083850312156123c6578182fd5b6123cf836121b6565b946020939093013593505050565b60008060008060008060008060008060c08b8d0312156123fb578586fd5b8a3567ffffffffffffffff80821115612412578788fd5b61241e8e838f016121da565b909c509a5060208d0135915080821115612436578788fd5b6124428e838f016121da565b909a50985060408d013591508082111561245a578788fd5b6124668e838f016121da565b909850965060608d013591508082111561247e578586fd5b5061248b8d828e016121da565b90955093505060808b013591506124a460a08c016122e4565b90509295989b9194979a5092959850565b600080600080608085870312156124ca578384fd5b843567ffffffffffffffff808211156124e1578586fd5b6124ed88838901612224565b95506020870135915080821115612502578485fd5b5061250f87828801612295565b93505060408501359150612525606086016122e4565b905092959194509250565b600060208284031215612541578081fd5b5035919050565b600060208284031215612559578081fd5b5051919050565b600080600060608486031215612574578081fd5b83359250602084013567ffffffffffffffff80821115612592578283fd5b61259e87838801612224565b935060408601359150808211156125b3578283fd5b506125c086828701612295565b9150509250925092565b8060005b60038110156125ff5781516fffffffffffffffffffffffffffffffff168452602093840193909101906001016125ce565b50505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452612647816020860160208601612ab2565b601f01601f19169290920160200192915050565b6003811061267957634e487b7160e01b600052602160045260246000fd5b9052565b6000825161268f818460208701612ab2565b9190910192915050565b600073ffffffffffffffffffffffffffffffffffffffff851682526fffffffffffffffffffffffffffffffff84166020830152606060408301526126e0606083018461262f565b95945050505050565b6040808252810184905260008560608301825b878110156127405761272f82612711856121b6565b73ffffffffffffffffffffffffffffffffffffffff16815260200190565b6020939093019291506001016126fc565b506020915083810382850152808582528282019050828660051b83010187855b888110156127e957601f1985840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18b36030181126127a2578788fd5b8a01803567ffffffffffffffff8111156127ba578889fd5b8036038c13156127c8578889fd5b6127d585828a8501612605565b958801959450505090850190600101612760565b50909a9950505050505050505050565b604080825283519082018190526000906020906060840190828701845b8281101561284a57815173ffffffffffffffffffffffffffffffffffffffff16845260208401935090840190600101612816565b50505083810382850152845180825282820190600581901b83018401878501865b8381101561289957601f1986840301855261288783835161262f565b9487019492509086019060010161286b565b50909998505050505050505050565b60608101610d9082846125ca565b8581526fffffffffffffffffffffffffffffffff858116602083015284811660408301528316606082015260e081016128f260808301846125ca565b9695505050505050565b81546fffffffffffffffffffffffffffffffff8116825260408201906110ca60208401608083901c60ff1661265b565b6fffffffffffffffffffffffffffffffff8316815260408101612952602083018461265b565b9392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261298d578283fd5b83018035915067ffffffffffffffff8211156129a7578283fd5b60200191503681900382131561221d57600080fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156129e5576129e5612b2d565b604052919050565b600067ffffffffffffffff821115612a0757612a07612b2d565b5060051b60200190565b60006fffffffffffffffffffffffffffffffff808316818516808303821115612a3c57612a3c612b17565b01949350505050565b60008219821115612a5857612a58612b17565b500190565b60006fffffffffffffffffffffffffffffffff83811690831681811015612a8657612a86612b17565b039392505050565b600082821015612aa057612aa0612b17565b500390565b6000610d8d368484612109565b60005b83811015612acd578181015183820152602001612ab5565b838111156125ff5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612b1057612b10612b17565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122042ced89b1d71dbda1148b0f16212cc0acca15c30c5c992bcc2775edbacfb916564736f6c63430008030033";

type TestCoreVotingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestCoreVotingConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestCoreVoting__factory extends ContractFactory {
  constructor(...args: TestCoreVotingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _timelock: string,
    _baseQuorum: BigNumberish,
    _minProposalPower: BigNumberish,
    _gsc: string,
    votingVaults: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<TestCoreVoting> {
    return super.deploy(
      _timelock,
      _baseQuorum,
      _minProposalPower,
      _gsc,
      votingVaults,
      overrides || {},
    ) as Promise<TestCoreVoting>;
  }
  getDeployTransaction(
    _timelock: string,
    _baseQuorum: BigNumberish,
    _minProposalPower: BigNumberish,
    _gsc: string,
    votingVaults: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(
      _timelock,
      _baseQuorum,
      _minProposalPower,
      _gsc,
      votingVaults,
      overrides || {},
    );
  }
  attach(address: string): TestCoreVoting {
    return super.attach(address) as TestCoreVoting;
  }
  connect(signer: Signer): TestCoreVoting__factory {
    return super.connect(signer) as TestCoreVoting__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestCoreVotingInterface {
    return new utils.Interface(_abi) as TestCoreVotingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): TestCoreVoting {
    return new Contract(address, _abi, signerOrProvider) as TestCoreVoting;
  }
}
